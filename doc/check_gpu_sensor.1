.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CHECK_GPU_SENSOR 1"
.TH CHECK_GPU_SENSOR 1 "2013-02-22" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
check_gpu_sensor \- A NVIDIA NVML Nagios/Icinga plugin to check gpu sensors.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Example:
.PP
.Vb 5
\&        $ ./check_gpu_sensor \-db \*(Aq0000:83:00.0\*(Aq
\&        OK \- Tesla K20c |ECCL2AggSgl=0;1;2; ECCTexAggSgl=0;1;2; PWRUsage=31.43;150;200;
\&        ECCRegAggSgl=0;1;2; SMClock=705 ECCL1AggSgl=0;1;2; usedMemory=0.24;95;99;
\&        fanSpeed=30;80;95; memClock=2600 GPUUtilRate=25 memUtilRate=1 graphicsClock=705
\&        GPUTemperature=36;85;100; ECCMemAggSgl=0;1;2;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "get_version"
.IX Subsection "get_version"
Returns the check_gpu_sensor version, the \s-1NVIDIA\s0 driver version and the nvml
library version.
.SS "get_usage"
.IX Subsection "get_usage"
Return a short usage message text how to call the plugin.
.SS "get_help"
.IX Subsection "get_help"
Get the help message text how to call the plugin. Also config parameters are
described and how to use them.
.SS "check_nvml_setup"
.IX Subsection "check_nvml_setup"
Checks if the nvml library can be found in any of the installation paths.
.SS "handle_error"
.IX Subsection "handle_error"
Checks the return values of the \s-1NVML\s0 function calls and propagates the error
strings if any are present. If a feature is not supported 'N/A' is returned.
.SS "print_hash"
.IX Subsection "print_hash"
Prints the keys and values of a hash. If every value of a hash is 'N/A' the
whole hash is returned as 'N/A'.
.SS "get_hash_values"
.IX Subsection "get_hash_values"
Returns a string containing all values and hashes. The method uses print_hash
to get the nested hash values.
.SS "get_status_string"
.IX Subsection "get_status_string"
Form a status string with warning and critical sensor values followed by
performance data with their corresponding thresholds.
.SS "get_verbose_string"
.IX Subsection "get_verbose_string"
Get a verbose string with version informations and all sensor values (also)
with not supported 'N/A' sensors.
.SS "check_hash_for_perf"
.IX Subsection "check_hash_for_perf"
Checks a hash if it contains any numerical values to be displayed as
performance data. \s-1EXCLUDE_LIST\s0 contains the hash keys that should not be
displayed as performance values (device handles, device IDs).
.SS "get_nvml_version"
.IX Subsection "get_nvml_version"
Get the version of the installed \s-1NVML\s0 version.
.SS "get_driver_version"
.IX Subsection "get_driver_version"
Get the version of the install \s-1NVIDIA\s0 driver.
.SS "get_device_count"
.IX Subsection "get_device_count"
Get the number of the current devices in the system.
.SS "get_device_clock"
.IX Subsection "get_device_clock"
Get \s-1SM\s0, graphics and memory clock.
.SS "get_device_inforom"
.IX Subsection "get_device_inforom"
Get the inforom version for \s-1OEM\s0, \s-1ECC\s0 und Power.
.SS "get_device_ecc"
.IX Subsection "get_device_ecc"
Get device \s-1ECC\s0 error counters \- aggregate counters for single bit, volatile
counters for double bit. Single bit errors thresholds can be configured as it
is hard to define a certain level where single bit errors really lead to a card
error. Double bit errors are treated as discrete sensors, they directly lead
to a critical status. Volatile counters are used as the counters are resetted
on reboot, if the double bit errors are still there afterwards the card may
have some issues.
.SS "get_device_power"
.IX Subsection "get_device_power"
Checks if the power management features are enabled and fetches the device's
power usage in watts. Calls nvmlDeviceGetPowerUsage and converts the return
value (milliwatts) to watts. To set a power level with nvidia-smi use
(administrator privileges reqired):
.PP
.Vb 1
\&        $ sudo nvidia\-smi \-i ID \-pl POWER_LIMIT
.Ve
.PP
Limits must be between Min and Max power limit. The limit defines the upper
bound at which the power managment algorithm starts in. To get the supported
power limits execute:
.PP
.Vb 1
\&        $ nvidia\-smi \-i 0 \-q \-d POWER
.Ve
.PP
Performance thresholds set via the plugin are independent from the
nvidia-smi one's.'
.SS "get_persistence_mode"
.IX Subsection "get_persistence_mode"
Gets the device's persistence mode setting (due to nvidia-smi documentation
only on Linux available). If the setting is available it later on checks if
the mode is enabled. As it is more convenient to use the persistence mode a
Warning status is triggered if the persistence mode is not enabled. Enable
the mode with:
.PP
.Vb 1
\&        $ sudo nvidia\-smi \-i ID \-pm 1
.Ve
.SS "get_inforom_validation"
.IX Subsection "get_inforom_validation"
Reads the inforom from the flash file and verifys the checksum. If the
inforom is corrupted the sensor is treated as a discrete sensor and
a critical status is returned. If the inforom is \s-1OK\s0 \*(L"valid\*(R" is returned.
.SS "get_throttle_reasons"
.IX Subsection "get_throttle_reasons"
Retrieve current clock throttle reasons. For the throttle reasons \*(L"HWSlowdown\*(R"
and \*(L"ReasonUnknown\*(R" the sensor is treated as discrete and a Critical status
is returned. For throttle reasons idle, user defined clocks, sw power caps and
none no Critical status is triggered.
.SS "get_device_memory"
.IX Subsection "get_device_memory"
Get the device memory usage in percentage of the total available memory.
.SS "get_device_util"
.IX Subsection "get_device_util"
Get the device utilization rates for memory and \s-1GPU\s0.
.SS "get_device_status"
.IX Subsection "get_device_status"
Call all device related sensor functions. Currently this includes:
.PP
.Vb 7
\&        \-Device Name            \-Clock infos
\&        \-Comupte mode           \-Inforom infos
\&        \-FanSpeed               \-ECC error counters
\&        \-Temperature            \-Power usage
\&        \-PCI infos              \-Memory usage
\&        \-Device Utilization     \-Persistence Mode
\&        \-Inforom validation     \-Throttle reasons
.Ve
.SS "get_all_device_status"
.IX Subsection "get_all_device_status"
Checks if a \s-1GPU\s0 with the defined identifier is available. Then fetches
a device handle and calls get_device_status to retreive the status value
of the desired \s-1GPU\s0.
.SS "collect_perf_data"
.IX Subsection "collect_perf_data"
Parses the device hashes of a device and collects the perf data (only numeric values)
into arrays. Uses check_hash_for_perf to find the performance values.
.SS "check_perf_threshold"
.IX Subsection "check_perf_threshold"
Checks if the given performance data is in its ranges. For the performance values
that are not in their thresholds two arrays are created: one for the warning and
one for the critical sensors. If one sensor is critical it is removed from the
warning array, so that is it not double displayed.
.SS "check_discrete_sensors"
.IX Subsection "check_discrete_sensors"
Checks if the discrete sensors are present and have a certain value. Currently
these are:
.PP
.Vb 4
\&        \-Double ECC errors
\&        \-Persistence mode
\&        \-Inforom checksum
\&        \-Throttle reasons (HW and unknown slowdown)
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Error: No NVIDIA device found in current system.""" 4
.el .IP "\f(CWError: No NVIDIA device found in current system.\fR" 4
.IX Item "Error: No NVIDIA device found in current system."
The \s-1NVML\s0 device count function returned 0.
.ie n .IP """Error: Cannot get handle for device bus ID:""" 4
.el .IP "\f(CWError: Cannot get handle for device bus ID:\fR" 4
.IX Item "Error: Cannot get handle for device bus ID:"
nvmlDeviceGetHandleByPciBusId returned an error.
.ie n .IP """Error: Cannot get handle for device:""" 4
.el .IP "\f(CWError: Cannot get handle for device:\fR" 4
.IX Item "Error: Cannot get handle for device:"
nvmlDeviceGetHandleByIndex returned an error.
.ie n .IP """Debug: Nvml setup check failed.""" 4
.el .IP "\f(CWDebug: Nvml setup check failed.\fR" 4
.IX Item "Debug: Nvml setup check failed."
Checking for the libnvidia-ml library in the given paths did not return a success.
.ie n .IP """Debug: NVML initialization failed.""" 4
.el .IP "\f(CWDebug: NVML initialization failed.\fR" 4
.IX Item "Debug: NVML initialization failed."
The call to nvmlInit returned an error and failed.
.ie n .IP """Error: Valid PCI bus string or device ID is required.""" 4
.el .IP "\f(CWError: Valid PCI bus string or device ID is required.\fR" 4
.IX Item "Error: Valid PCI bus string or device ID is required."
A device identifier (device id or pci bus id) must be specified to know the
Gpu whose sensors should be checked.
.ie n .IP """Ensure to use a valid device id or device bus string.""" 4
.el .IP "\f(CWEnsure to use a valid device id or device bus string.\fR" 4
.IX Item "Ensure to use a valid device id or device bus string."
For the given device identifier a valid device handle could not be created.
